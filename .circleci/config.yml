version: 2 # use CircleCI 2.0
jobs: # a collection of steps
    build: # runs not using Workflows must have a `build` job as entry point
        working_directory: ~/happyTicketingAPI # directory where steps will run

        docker: # run the steps with Docker
            - image: circleci/openjdk:11.0.3-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run
              environment:
                  TEST_DATABASE_URL: postgresql://root@localhost/happyticketingtest

            - image: circleci/postgres:9.6.5-alpine-ram
              environment:
                  POSTGRES_DB: happyticketingtest

        steps: # a collection of executable commands
            - checkout # check out source code to working directory
            - run: sudo apt-get update
            - run: sudo apt-get install postgresql-client-9.6

            - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
                  # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
                  key: circleci-demo-java-spring-{{ checksum "pom.xml" }}

            - run: mvn dependency:go-offline # gets the project dependencies

            - save_cache: # saves the project dependencies
                  paths:
                      - ~/.m2
                  key: circleci-demo-java-spring-{{ checksum "pom.xml" }}

            - run:
                  name: Waiting for PostgreSQL to start
                  command: |
                      for i in `seq 1 10`;
                      do
                        nc -z localhost 5432 && echo Success && exit 0
                        echo -n .
                        sleep 2
                      done
                      echo Failed waiting for Postgres && exit 1
            - run:
                  name: Initialize test database
                  command: |
                      psql -d $TEST_DATABASE_URL -f ~/happyTicketingAPI/test_db.sql

            - run: mvn -Ptest package

            - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
                  # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
                  path: target/surefire-reports

            - store_artifacts: # store the uberjar as an artifact
                  # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
                  path: target/demo-java-spring-0.0.1-SNAPSHOT.jar
            # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
